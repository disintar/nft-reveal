;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

#pragma version >=0.2.0;
#include "utils/helpers.func";
#include "utils/params.func";
#include "utils/op-codes.func";

;; I try to encapsulate the parts related to reveal,
;; so that anyone can copy the functions and reuse them in their contracts.
(int, cell) try_parse_reveal_data(cell data) inline {
    cell reveal_content = null();
    int reveal_items_count = 0;

    if (~ is_null(data)){
        slice data_slice = data.begin_parse();
        if (data_slice.slice_bits() > 0) {
            reveal_items_count = data_slice~load_uint(64);

            if (reveal_items_count != 0){
                reveal_content = data_slice~load_ref();
            }

            return (reveal_items_count, reveal_content);
        }
    }

    return (reveal_items_count, reveal_content);
}

cell compact_reveal_data(int reveal_items_count, cell reveal_content_dict) inline {
    builder db = begin_cell().store_uint(reveal_items_count, 64);

    ifnot (reveal_content_dict.is_null()) {
        db = db.store_ref(reveal_content_dict);
    }

    return db.end_cell();
}

(slice, int, cell, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    slice owner_address = ds~load_msg_addr();
    int next_item_index = ds~load_uint(64);
    cell content = ds~load_ref();
    cell nft_item_code = ds~load_ref();
    cell royalty_params = ds~load_ref();

    cell reveal_data = null();
    if (ds.slice_refs() > 0){
        reveal_data = ds~load_ref();
    }

    return
            (owner_address, ;; owner_address
             next_item_index, ;;
             content, ;; content
             nft_item_code, ;; nft_item_code
             royalty_params, ;; royalty_params
             reveal_data  ;; reveal_data
            );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell reveal_data) impure inline {
    builder data_cell = begin_cell().store_slice(owner_address)
                                    .store_uint(next_item_index, 64)
                                    .store_ref(content)
                                    .store_ref(nft_item_code)
                                    .store_ref(royalty_params);

    if (cell_null?(reveal_data) != true){
      data_cell = data_cell.store_ref(reveal_data);
    }

    set_data(data_cell.end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain, state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(to_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op_report_royalty_params, 32)
            .store_uint(query_id, 64)
            .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

cell execute_reveal(slice sender_address, slice msg_body, cell nft_item_code, cell reveal_data, int query_id) impure inline {
    int item_index = msg_body~load_uint(256);

    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain, state_init);

    ;; body of answer
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(nft_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op_nft_reveal_success_collection_response, 32)
            .store_uint(query_id, 64);

    ;; Get messages only from nfts
    throw_unless(501, equal_slices(nft_address, sender_address));

    (var total_count, cell reveal_data_dict) = try_parse_reveal_data(reveal_data);


    ;; If no items to open - send nft response with unsuccess
    if (total_count == 0){
        msg = msg.store_uint(0, 1); ;; unsuccess
        send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message

        throw(0);
    }

    randomize_lt();

    ;; Nice treak, https://tondev.org/recipes/random-nft ;)
    ;; Randomize through number of available choices in collection
    int index = rand(total_count);

    ;; Check if index was used, if used, dict should store skipped index (see code after)
    (slice value, _) = reveal_data_dict.udict_get?(64, index);

    if (index != total_count - 1){
        (slice tailValue, _) = reveal_data_dict.udict_get?(64, total_count - 1);
        reveal_data_dict~udict_set(64, index, tailValue);
    }

    ;; Cleanup tail
    reveal_data_dict~udict_delete?(64, total_count - 1);

    msg = msg.store_uint(1, 1) ;; success
            .store_uint(1, 1) ;; maybe
            .store_uint(0, 1) ;; either
            .store_slice(value);

    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message

    cell new_reveal_data = compact_reveal_data(total_count - 1, reveal_data_dict);
    return new_reveal_data;
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, reveal_data) = load_data();

    ;; Todo: onchain reflection on reveal_data

    if (op == op_get_royalty_params) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    if (op == op_nft_reveal_nft_request) {
        cell updated_reveal_data = execute_reveal(sender_address, in_msg_body, nft_item_code, reveal_data, query_id);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, updated_reveal_data);
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));


    if (op == 1) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());
        if (is_last) {
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, reveal_data);
        }
        return ();
    }
    if (op == 2) { ;; batch deploy of new nfts
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if (f?) {
                counter += 1;
                if (counter >= 250) { ;; Limit due to limits of action list size
                    throw(399);
                }

                throw_unless(403 + counter, item_index <= next_item_index);
                deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());
                if (item_index == next_item_index) {
                    next_item_index += 1;
                }
            }
        } until (~ f?);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, reveal_data);
        return ();
    }
    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, reveal_data);
        return ();
    }

    if (op == op_collection_add_reveal_batch) { ;; add items to reveal
        ;; todo: limit total items count in dict to prevent huge gas fee
        cell reveal_batch = in_msg_body~load_ref();

        (var total_count, cell reveal_data_dict) = try_parse_reveal_data(reveal_data);

        do {
            var (item_index, item, f?) = reveal_batch~udict::delete_get_min(64);
            if (f?) {
                ;; Actually in some cases you can store needed content data only in indexes
                int either = item~load_uint(1);

                ;; todo: add onchain reflection on which items are added
                if (either == 0){
                  reveal_data_dict~udict_add?(64, total_count, item);
                } else {
                  reveal_data_dict~udict_add?(64, total_count, item~load_ref().begin_parse());
                }

                total_count += 1;
            }
        } until (~ f?);

        cell new_reveal_data = compact_reveal_data(total_count, reveal_data_dict);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_reveal_data);
        ~strdump("All done");
        return ();
    }


    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain, state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, royalty, _) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
            .store_uint(1, 8) ;; offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
            .end_cell());
}

(int, cell) get_reveal_data() method_id {
    var (_, _, _, _, _, reveal_data) = load_data();
    (int total_count, cell reveal_data_dict) = try_parse_reveal_data(reveal_data);

    return (total_count, reveal_data_dict);
}