;;
;;  TON NFT Item Smart Contract
;;

{-

    NOTE that this tokens can be transferred within the same workchain.

    This is suitable for most tokens, if you need tokens transferable between workchains there are two solutions:

    1) use more expensive but universal function to calculate message forward fee for arbitrary destination (see `misc/forward-fee-calc.cs`)

    2) use token holder proxies in target workchain (that way even 'non-universal' token can be used from any workchain)

-}

#pragma version >=0.2.0;
#include "utils/helpers.func";
#include "utils/params.func";
#include "utils/op-codes.func";



const int min_tons_for_storage = 50000000; ;; 0.05 TON
const int min_tons_for_reveal = 1000000000; ;; 1 TON


;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;

(int, int, slice, slice, cell, int) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      slice owner_address = ds~load_msg_addr();
      cell content = ds~load_ref();

      int reveal_mode = 1; ;; can reveal by defaut
      if (ds.slice_bits() >= 2){
        reveal_mode = ds~load_uint(2);
      }

      return (-1, index, collection_address, owner_address, content, reveal_mode);
    } else {  
      return (0, index, collection_address, null(), null(), 0); ;; nft not initialized yet and can't reveal
    }
}

() store_data(int index, slice collection_address, slice owner_address, cell content, int reveal_mode) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_ref(content)
            .store_uint(reveal_mode, 2)
            .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content,
        slice sender_address, int query_id, slice in_msg_body, int fwd_fees, int reveal_mode) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage;
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op_ownership_assigned, query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op_excesses, query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, new_owner_address, content, reveal_mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; if message bounced from reveal collection
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, cell content, int reveal_mode) = load_data();
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      store_data(index, collection_address, in_msg_body~load_msg_addr(), in_msg_body~load_ref(), 1);
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op_transfer) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, reveal_mode);
      return ();
    }
    if (op == op_get_static_data) {
      ;; carry all the remaining value of the inbound message
      send_msg(sender_address, 0, op_report_static_data, query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);
      return ();
    }
    if (op == op_nft_reveal_user_request){ ;; request reveal
        throw_unless(501, equal_slices(sender_address, owner_address));
        throw_unless(502, reveal_mode == 1);
        throw_unless(503, msg_value >= min_tons_for_reveal);

        send_msg(collection_address, 0,
                op_nft_reveal_nft_request,
                query_id,
                begin_cell().store_uint(index, 256), 64);

        ;; lock nft
        store_data(index, collection_address, owner_address, content, 2);
        return ();
    }

    if (op == op_nft_reveal_success_collection_response){
        throw_unless(501, equal_slices(sender_address, collection_address));
        throw_unless(502, reveal_mode == 2); ;; need to be locked

        int success = in_msg_body~load_uint(1);
        if (success == 1){
            ;; maybe (sometimes you can change content for index only in collection)
            int maybe = in_msg_body~load_uint(1);

            if (maybe == 1){
                int either = in_msg_body~load_uint(1);

                if (either == 0){
                    ;; reveal nft, change content
                    cell new_content = begin_cell().store_slice(in_msg_body).end_cell();
                    store_data(index, collection_address, owner_address, new_content, 3);
                } else {
                    ;; reveal nft, change content
                    cell new_content = in_msg_body~load_ref();
                    store_data(index, collection_address, owner_address, new_content, 3);
                }
            } else {
                ;; reveal nft, do not change content
                store_data(index, collection_address, owner_address, content, 3);
            }

            ;; carry all the remaining value of the inbound message
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(owner_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("Reveal nft: success");

            send_raw_message(msg.end_cell(), 64);
            return ();
        } else {
            ;; unlock nft
            store_data(index, collection_address, owner_address, content, 1);

            ;; carry all the remaining value of the inbound message
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(owner_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_slice("Reveal nft: out of items");

            send_raw_message(msg.end_cell(), 64);

            throw(0);
        }

    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address, cell content, _) = load_data();
  return (init?, index, collection_address, owner_address, content);
}

int get_reveal_mode() method_id {
  (_, _, _, _, _, int reveal_mode) = load_data();

  ;; 0 - No lock, not revealed, can't reveal
  ;; 1 - No lock, not revealed, can reveal
  ;; 2 - Lock, not revealed
  ;; 3 - Revealed

  return reveal_mode;
}